// DO NOT EDIT! generated by ./aut

#ifndef primes_h
#define primes_h

#include "../common/namespace.h"

#if defined P2047m1l226
#define primes_num 226
#define NUMBER_OF_WORDS 32
#define two_cofactor 64
#define E2 1
#define primes_batches 25
#define primes_maxbatchboundplussize 15
#define UPPER_BOUND 1044	// Bits of 4 * sqrt( [p + 1] / [2^e] )
#define ELLIGATOR_SEED 2
#define N 221
#define SKBYTES 28
#define NUMBER_OF_POINTS 12

#elif defined P4095m27l262
#define primes_num 262
#define NUMBER_OF_WORDS 64
#define two_cofactor 1728
#define E2 27
#define primes_batches 26
#define primes_maxbatchboundplussize 16
#define UPPER_BOUND 1240
#define ELLIGATOR_SEED 2
#define N 256
#define SKBYTES 32
#define NUMBER_OF_POINTS 12

#elif defined P5119m46l244
#define primes_num 244
#define NUMBER_OF_WORDS 80
#define two_cofactor 2944
#define E2 46
#define primes_batches 25
#define primes_maxbatchboundplussize 18
#define UPPER_BOUND 1139
#define ELLIGATOR_SEED 2
#define N 234
#define SKBYTES 30
#define NUMBER_OF_POINTS 13

#elif defined P6143m59l262
#define primes_num 262
#define NUMBER_OF_WORDS 96
#define two_cofactor 3776
#define E2 59
#define primes_batches 28
#define primes_maxbatchboundplussize 15
#define UPPER_BOUND 1249
#define ELLIGATOR_SEED 3
#define N 256
#define SKBYTES 32
#define NUMBER_OF_POINTS 12

#elif defined P8191m78l338
#define primes_num 338
#define NUMBER_OF_WORDS 128
#define two_cofactor 4992
#define E2 78
#define primes_batches 34
#define primes_maxbatchboundplussize 16
#define UPPER_BOUND 1983
#define ELLIGATOR_SEED 2
#define N 332
#define SKBYTES 42
#define NUMBER_OF_POINTS 13

#elif defined P9215m85l389
#define primes_num 389
#define NUMBER_OF_WORDS 144
#define two_cofactor 5440
#define E2 85
#define primes_batches 33
#define primes_maxbatchboundplussize 20
#define UPPER_BOUND 1983
#define ELLIGATOR_SEED 3
#define N 384
#define SKBYTES 48
#define NUMBER_OF_POINTS 13

#else

#error BITS must be 2047m1l226 or 4095m27l262 or 5119m46l244 or 6143m59l262 or 8191m78l338 or 9215m85l389

#endif



#define primes NS(primes)
#define primes_dac NS(primes_dac)
#define primes_daclen NS(primes_daclen)

#ifndef CTIDH
extern const long long primes[N];
extern const long long primes_dac[N];
extern const long long primes_daclen[N];
#define strategy NS(strategy)
extern const long long strategy[N];
#else
extern const long long primes[primes_num];
extern const long long primes_dac[primes_num];
extern const long long primes_daclen[primes_num];
#endif

#define primes_batchsize NS(primes_batchsize)
extern const long long primes_batchsize[primes_batches];
#define primes_batchstart NS(primes_batchstart)
extern const long long primes_batchstart[primes_batches];
#define primes_batchstop NS(primes_batchstop)
extern const long long primes_batchstop[primes_batches];
#define primes_batchbound NS(primes_batchbound)
extern const long long primes_batchbound[primes_batches];
#define primes_batchmaxdaclen NS(primes_batchmaxdaclen)
extern const long long primes_batchmaxdaclen[primes_batches];


#endif
