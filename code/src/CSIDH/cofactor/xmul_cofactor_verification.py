import click
from math import sqrt, floor

L = [
3,  5,  7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,347,349,353,359,367,373,379,383,
389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,
881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429
]

SDACS_LENGTH = [
0,  1,  2,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  7,  8,  8,  8,  8,  8,  9,  9,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10,  9, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,
11, 11, 11, 11, 11, 12, 11, 11, 12, 11, 11, 11, 12, 11, 11, 12, 11, 12, 11, 11, 12, 11, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12,
13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 13, 13, 13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 13, 13, 14, 14, 14, 14, 13, 13, 14, 13, 14, 13, 13, 13, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 13, 13
];

SDAC0 = "";
SDAC1 = "0";
SDAC2 = "10";
SDAC3 = "100";
SDAC4 = "000";
SDAC5 = "1010";
SDAC6 = "0100";
SDAC7 = "11000";
SDAC8 = "10000";
SDAC9 = "01000";
SDAC10 = "110000";
SDAC11 = "101010";
SDAC12 = "100010";
SDAC13 = "100000";
SDAC14 = "1101010";
SDAC15 = "1011000";
SDAC16 = "1010001";
SDAC17 = "1001000";
SDAC18 = "1010000";
SDAC19 = "0010100";
SDAC20 = "0010000";
SDAC21 = "11010010";
SDAC22 = "0000000";
SDAC23 = "11000000";
SDAC24 = "10100100";
SDAC25 = "00110000";
SDAC26 = "01100000";
SDAC27 = "10000100";
SDAC28 = "111010000";
SDAC29 = "110100001";
SDAC30 = "01000000";
SDAC31 = "110101000";
SDAC32 = "110000100";
SDAC33 = "110100000";
SDAC34 = "010110100";
SDAC35 = "110000000";
SDAC36 = "100101000";
SDAC37 = "100001010";
SDAC38 = "011000000";
SDAC39 = "100010000";
SDAC40 = "100000010";
SDAC41 = "010001000";
SDAC42 = "010000010";
SDAC43 = "1100010001";
SDAC44 = "100000000";
SDAC45 = "1100010100";
SDAC46 = "1011000100";
SDAC47 = "1100001000";
SDAC48 = "1100010000";
SDAC49 = "000000000";
SDAC50 = "1010101010";
SDAC51 = "1101000000";
SDAC52 = "1000101010";
SDAC53 = "1010000001";
SDAC54 = "1001010000";
SDAC55 = "1000101000";
SDAC56 = "1010001000";
SDAC57 = "1010100000";
SDAC58 = "0101001000";
SDAC59 = "1001000000";
SDAC60 = "1000000010";
SDAC61 = "0100001000";
SDAC62 = "0010100000";
SDAC63 = "0001010000";
SDAC64 = "0101000000";
SDAC65 = "11010101000";
SDAC66 = "10101101000";
SDAC67 = "10110101000";
SDAC68 = "10110010000";
SDAC69 = "11001000000";
SDAC70 = "10110000010";
SDAC71 = "10101001010";
SDAC72 = "10110100000";
SDAC73 = "10101000001";
SDAC74 = "10100000101";
SDAC75 = "10101001000";
SDAC76 = "10100101000";
SDAC77 = "10100001010";
SDAC78 = "10001000100";
SDAC79 = "111000001010";
SDAC80 = "10100100000";
SDAC81 = "10100000100";
SDAC82 = "111010100000";
SDAC83 = "10100000010";
SDAC84 = "00101000100";
SDAC85 = "01000010100";
SDAC86 = "110110010000";
SDAC87 = "10000000100";
SDAC88 = "10000001000";
SDAC89 = "111010000000";
SDAC90 = "10100000000";
SDAC91 = "110010001010";
SDAC92 = "01000100000";
SDAC93 = "00101000000";
SDAC94 = "110100010010";
SDAC95 = "10000000000";
SDAC96 = "101100100010";
SDAC97 = "00010000000";
SDAC98 = "101101000010";
SDAC99 = "101101010000";
SDAC100 = "100101100000";
SDAC101 = "101000011000";
SDAC102 = "101010101010";
SDAC103 = "101100010000";
SDAC104 = "110000100000";
SDAC105 = "100100010010";
SDAC106 = "100010010010";
SDAC107 = "010100011000";
SDAC108 = "101101000000";
SDAC109 = "100010100100";
SDAC110 = "101010000001";
SDAC111 = "110100000000";
SDAC112 = "100010001010";
SDAC113 = "101010000100";
SDAC114 = "101001010000";
SDAC115 = "101010001000";
SDAC116 = "100100000100";
SDAC117 = "100000100100";
SDAC118 = "101000000001";
SDAC119 = "100000010010";
SDAC120 = "100001000010";
SDAC121 = "100010000010";
SDAC122 = "100000101000";
SDAC123 = "100000001010";
SDAC124 = "001010010000";
SDAC125 = "000101001000";
SDAC126 = "011000000000";
SDAC127 = "1100101010100";
SDAC128 = "010100001000";
SDAC129 = "1101001001010";
SDAC130 = "1101100000100";
SDAC131 = "1101100001000";
SDAC132 = "1101001010100";
SDAC133 = "001001000000";
SDAC134 = "001000001000";
SDAC135 = "1100001001010";
SDAC136 = "1110000000000";
SDAC137 = "1011010010100";
SDAC138 = "1101001000010";
SDAC139 = "1011011000000";
SDAC140 = "1101010010000";
SDAC141 = "1100010000001";
SDAC142 = "1101001010000";
SDAC143 = "1101010000010";
SDAC144 = "1100001000100";
SDAC145 = "1101000001010";
SDAC146 = "1010010110000";
SDAC147 = "001000000000";
SDAC148 = "1100000100010";
SDAC149 = "000001000000";
SDAC150 = "1100000010100";
SDAC151 = "1101000000100";
SDAC152 = "1101000010000";
SDAC153 = "1100000000001";
SDAC154 = "1101000000010";
SDAC155 = "1101010000000";
SDAC156 = "1001010001010";
SDAC157 = "1011000001000";
SDAC158 = "1010010001010";
SDAC159 = "1010010101000";
SDAC160 = "1100010000000";
SDAC161 = "1000000001100";
SDAC162 = "1010101000010";
SDAC163 = "1000100100010";
SDAC164 = "1010101010000";
SDAC165 = "1001000001010";
SDAC166 = "1010001001000";
SDAC167 = "1000001010010";
SDAC168 = "1101000000000";
SDAC169 = "1000100001010";
SDAC170 = "1000101000010";
SDAC171 = "1000010000001";
SDAC172 = "1000100000001";
SDAC173 = "0100000110000";
SDAC174 = "0110000010000";
SDAC175 = "0110000001000";
SDAC176 = "1001000010000";
SDAC177 = "11011000100100";
SDAC178 = "1001000000010";
SDAC179 = "0101010010000";
SDAC180 = "1000010001000";
SDAC181 = "1000001000010";
SDAC182 = "1000100000010";
SDAC183 = "11011001010000";
SDAC184 = "1000010100000";
SDAC185 = "0100010010000";
SDAC186 = "0100100010000";
SDAC187 = "0010010100000";
SDAC188 = "0010100000100";
SDAC189 = "0010001010000";
SDAC190 = "0101001000000";
SDAC191 = "0101000000100";
SDAC192 = "11010000011000";
SDAC193 = "0010101000000";
SDAC194 = "1000010000000";
SDAC195 = "1000000001000";
SDAC196 = "11000101010100";
SDAC197 = "10101011000001";
SDAC198 = "11010001010010";
SDAC199 = "11010101000100";
SDAC200 = "0000100100000";
SDAC201 = "0001000010000";
SDAC202 = "11010000101010";
SDAC203 = "0100100000000";
SDAC204 = "11010101010000";
SDAC205 = "0100000000100";
SDAC206 = "0100001000000";
SDAC207 = "0100000100000";
SDAC208 = "11000000001001";
SDAC209 = "11010010001000";
SDAC210 = "11000101000010";
SDAC211 = "0001010000000";
SDAC212 = "11010100010000";
SDAC213 = "11000010010000";
SDAC214 = "11010001010000";
SDAC215 = "10101000110000";
SDAC216 = "11010101000000";
SDAC217 = "10110000010100";
SDAC218 = "11000000100010";
SDAC219 = "0000100000000";
SDAC220 = "0000010000000";

SDACS = [
SDAC0, SDAC1, SDAC2, SDAC3, SDAC4, SDAC5, SDAC6, SDAC7, SDAC8, SDAC9, SDAC10, SDAC11, SDAC12, SDAC13, SDAC14, SDAC15, SDAC16, SDAC17, SDAC18, SDAC19, SDAC20, SDAC21, SDAC22, SDAC23, SDAC24, SDAC25, SDAC26, SDAC27, SDAC28, SDAC29, SDAC30, SDAC31, SDAC32, SDAC33, SDAC34, SDAC35, SDAC36, SDAC37, SDAC38, SDAC39, SDAC40, SDAC41, SDAC42, SDAC43, SDAC44, SDAC45, SDAC46, SDAC47, SDAC48, SDAC49, SDAC50, SDAC51, SDAC52, SDAC53, SDAC54, SDAC55, SDAC56, SDAC57, SDAC58, SDAC59, SDAC60, SDAC61, SDAC62, SDAC63, SDAC64, SDAC65, SDAC66, SDAC67, SDAC68, SDAC69, SDAC70, SDAC71, SDAC72, SDAC73, 
SDAC74, SDAC75, SDAC76, SDAC77, SDAC78, SDAC79, SDAC80, SDAC81, SDAC82, SDAC83, SDAC84, SDAC85, SDAC86, SDAC87, SDAC88, SDAC89, SDAC90, SDAC91, SDAC92, SDAC93, SDAC94, SDAC95, SDAC96, SDAC97, SDAC98, SDAC99, SDAC100, SDAC101, SDAC102, SDAC103, SDAC104, SDAC105, SDAC106, SDAC107, SDAC108, SDAC109, SDAC110, SDAC111, SDAC112, SDAC113, SDAC114, SDAC115, SDAC116, SDAC117, SDAC118, SDAC119, SDAC120, SDAC121, SDAC122, SDAC123, SDAC124, SDAC125, SDAC126, SDAC127, SDAC128, SDAC129, SDAC130, SDAC131, SDAC132, SDAC133, SDAC134, SDAC135, SDAC136, SDAC137, SDAC138, SDAC139, SDAC140, SDAC141, SDAC142, SDAC143, SDAC144, SDAC145, SDAC146, SDAC147, 
SDAC148, SDAC149, SDAC150, SDAC151, SDAC152, SDAC153, SDAC154, SDAC155, SDAC156, SDAC157, SDAC158, SDAC159, SDAC160, SDAC161, SDAC162, SDAC163, SDAC164, SDAC165, SDAC166, SDAC167, SDAC168, SDAC169, SDAC170, SDAC171, SDAC172, SDAC173, SDAC174, SDAC175, SDAC176, SDAC177, SDAC178, SDAC179, SDAC180, SDAC181, SDAC182, SDAC183, SDAC184, SDAC185, SDAC186, SDAC187, SDAC188, SDAC189, SDAC190, SDAC191, SDAC192, SDAC193, SDAC194, SDAC195, SDAC196, SDAC197, SDAC198, SDAC199, SDAC200, SDAC201, SDAC202, SDAC203, SDAC204, SDAC205, SDAC206, SDAC207, SDAC208, SDAC209, SDAC210, SDAC211, SDAC212, SDAC213, SDAC214, SDAC215, SDAC216, SDAC217, SDAC218, SDAC219, SDAC220
];

def xmul(j):
    """
    ----------------------------------------------------------------------
    xmul()
    input : a projective Montgomery x-coordinate point x(P) := XP/ZP, the
        projective Montgomery constants A24:= A + 2C and C24:=4C where
        E : y^2 = x^3 + (A/C)*x^2 + x, and an positive integer j
    output: the projective Montgomery x-coordinate point x([L[j]]P)
    ----------------------------------------------------------------------
    """
    P = 1
    P2 = 2*P
    R = [P, P2, P2 + P]

    for i in range(SDACS_LENGTH[j] - 1, -1, -1):

        T = R[2] + R[int(SDACS[j][i]) ^ 1]

        R[0] = R[int(SDACS[j][i]) ^ 1]
        R[1] = R[2]
        R[2] = T

    return R[2]

def cswap(x, y, b):
    z = list([x, y])
    z = list(z[:: (1 - 2 * b)])
    return z[0], z[1]

# Golden ration is used in prac algorithm
phi = (1.0 + sqrt(0.5)) / 2.0
phi_nu, phi_de = phi.as_integer_ratio()
def EUCLID2D(m, n, P, Q, PQ):
    """ The 2-dimensional scalar pseudomultiplication: x([r]P + [s - r]P) with r = s / {Golden Ratio}') """

    s0, s1 = m, n
    x0  = P
    x1  = Q
    diff= PQ

    while s0 != 0:
        if s1 < s0:
            x0, x1 = x1, x0
            s0, s1 = s1, s0
        if s1 <= 4*s0:
            # Fibonacci step
            x   = x0
            x0  = x1 + x0
            diff= x
            s1 -= s0
        elif (s0 % 2) == (s1 % 2):
            x0 = x1 + x0
            x1 *= 2
            s1 = (s1 - s0) // 2
        elif (s1 % 2) == 0:
            diff= x1 + diff
            x1  *= 2
            s1 //= 2
        else:
            diff= x0 + diff
            x0  *= 2
            s0 //= 2

    while s1 % 2 == 0:
        x1  *= 2
        s1 //= 2

    if s1 > 1:
        # Ladder step on the missing part: x0 will correspond with Ladder(x1)
        diff= x1
        x0 = x1
        x0 *= 2
        s1_binary = bin(s1)[2:][::-1]
        s1_length = len(s1_binary)
        for i in range(s1_length - 2, -1, -1):
            x0, x1 = cswap(x0, x1, int(s1_binary[i + 1]) ^ int(s1_binary[i]))
            x1 = x0 + x1
            x0 *= 2

        x0, x1 = cswap(x0, x1, int(s1_binary[0]))
    else:
        # In this case, the output should correspond with x1, thus we swap to x0
        x0, x1 = cswap(x0, x1, 1)

    return x0

def PRAC(k):
    """ PRAC algorithm: (simplified) 1-D Euclidean pseudomultiplication """

    s = k
    infty = 0  # Point at infinity

    # Reducing the problem from k = 2^i x s to s
    x = 1
    while s % 2 == 0:
        x  *= 2
        s //= 2

    r = (s * phi_nu) // phi_de
    x = EUCLID2D(r, s - r, x, x, infty)
    return x

@click.command()
@click.option('--cofactor', default=None, type=str, help='Cofactor h: p = h x ell_1 x ... ell_n x 3 x 5 x 7 - 1 being ell_1 = 3, ell_2 = 5, and ell_3 = 7.')
def main(cofactor : int):

    cofactor_int = int(cofactor,16)
    k = PRAC(cofactor_int)
    assert k == cofactor_int, 'whoops! smth was wrong in the computation! [PRAC]'
    click.echo(f'argument:\t{cofactor_int}')
    click.echo(f'computed:\t{k}\n')
    for i in range(0, len(L), 1):
        assert xmul(i) == L[i], 'whoops! smth was wrong in the computation! [SDACS]'

if __name__ == '__main__':
    main()
